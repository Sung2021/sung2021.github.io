Description = c("Name of the chromosome.",
"Start position of the peak (0-based).",
"End position of the peak (1-based).",
"Name of the peak.",
"Score of the peak, the significance of the peak.",
"The DNA strand.",
"Signal value in the peak region, the intensity or density of the peak.",
"P-value.",
"Adjusted p-value.",
"The peak summit relative to chromStart, the highest point within the peak.")
)
narrowPeak_columns %>% DT::datatable(rownames = T)
# Loading necessary library
library(data.table)
# Create a sample data frame that might resemble a coverage file output
coverage_data <- data.table(
chrom = c("chr1", "chr1", "chr2", "chr2", "chr3"),
start = c(100, 500, 200, 800, 150),
end = c(200, 600, 300, 900, 250),
num_reads = c(25, 30, 5, 20, 15),  # Example read counts
mean_coverage = c(2.5, 3.0, 0.5, 2.0, 1.5)  # Example mean coverage depth
)
# Print the data frame to see its content
print(coverage_data)
# Loading necessary library
library(data.table)
# Create a sample data frame that might resemble a coverage file output
coverage_data <- data.table(
chrom = c("chr1", "chr1", "chr2", "chr2", "chr3"),
start = c(100, 500, 200, 800, 150),
end = c(200, 600, 300, 900, 250),
num_reads = c(25, 30, 5, 20, 15),  # Example read counts
coverageFraction = c(1, 0.95, 0.20, 1, 0.85)  # Example mean coverage depth
)
# Print the data frame to see its content
print(coverage_data)
knitr::opts_chunk$set(echo=T, fig.align = "center", eval = F,
message=F, warning=F,
results = "markup",
error = TRUE,
highlight = TRUE,
prompt = FALSE,
tidy = FALSE)
tpm = read.csv("../sampledata/tpm.sample_mouse.csv", row.names = 1)
library(corto)
## Create hallmark pathway list
hallmark <- msigdbr::msigdbr(species = "Mus musculus", category = "H") %>%
dplyr::select(gs_name, gene_symbol) %>% data.frame()
hallmark$gs_name = gsub("HALLMARK_","",hallmark$gs_name)
hallmark_gs_list = hallmark$gs_name %>% unique()
hallmarkList = list()
for(i in 1:length(hallmark_gs_list)){
pathway = hallmark_gs_list[i]
gs = hallmark[hallmark$gs_name == pathway,2]
hallmarkList[[pathway]] = gs
}
knitr::opts_chunk$set(echo=F, fig.align = "center", message=F, warning=F)
# Load required libraries
library(cowplot)
library(dplyr)
library(ggplot2)
library(DESeq2)
# 9 grouped MHC I high and 3 grouped MHC I low FFPE samples in Navin's description
# Read the given data
dir= '~/Desktop/DF/DFCI_Barbie/DFCI_Barbie_NK_Marco/'
mhc_deseq = read.csv(paste0(dir,"info/published_RNA_seq/DEG_Deseq2_removedSamples_Low_vs_High.csv"), check.names = F)
# check the data
mhc_deseq[1:3,]
# colnames(mhc_deseq)
# Prepare data
mhc_deseq$color = 'not_selected'
gene_vector <- c("HLA-A", "HLA-B", "B2M", "TAP1", "AXL", "ASCL1", "NEUROD1", "POU2F3", "CXCL11", "CXCL10", "CXCL9", "CCL5", "CCL2")
gene_vector= gene_vector[gene_vector %in% mhc_deseq$Gene]
mhc_deseq[mhc_deseq$Gene %in% gene_vector,]$color = "selected"
mhc_deseq$label = ''
mhc_deseq[mhc_deseq$Gene %in% gene_vector,]$label = mhc_deseq[mhc_deseq$Gene %in% gene_vector,]$Gene
mhc_deseq %>% ggplot(aes(-log2FoldChange, -log10(padj))) +
geom_point(size = 1, alpha=0.8, show.legend = FALSE) +
theme_classic()
mhc_deseq %>% ggplot(aes(-log2FoldChange, -log10(padj), color=color)) +
geom_point(size = 1, alpha=0.8, show.legend = FALSE) +
scale_color_manual(values = c('black','red')) +
theme_classic()
mhc_deseq %>% ggplot(aes(-log2FoldChange, -log10(padj), color=color)) +
geom_point(size = 1, aes(alpha = color), show.legend = FALSE) +
scale_color_manual(values = c('black','red')) +
theme_classic()
mhc_deseq %>% ggplot(aes(-log2FoldChange, -log10(padj), color=color)) +
geom_point(size = 1, aes(alpha = color), show.legend = FALSE) +
scale_color_manual(values = c('black','red')) +
scale_alpha_manual(values = c(0.3,1)) +
geom_text(aes(label = label), size = 2.5, show.legend = FALSE, hjust = -0.2, nudge_x = 0.01) +
theme_classic()
mhc_deseq %>% ggplot(aes(-log2FoldChange, -log10(padj), color=color)) +
geom_point(size = 1, aes(alpha = color), show.legend = FALSE) +
scale_color_manual(values = c('grey','red')) +
scale_alpha_manual(values = c(0.3,1)) +
geom_text(aes(label = label), size = 2.5, show.legend = FALSE, hjust = -0.2, nudge_x = 0.01) +
theme_classic()
#DESeq output
set.seed(1234)
res =mhc_deseq
res= res[!duplicated(res$Gene),]
rownames(res)=res$Gene
library(clusterProfiler)
# hallmark reference
hallmark <- msigdbr::msigdbr(species = "Homo sapiens", category = "H") %>% dplyr::select(gs_name, gene_symbol)
# perform_GSEA <- function(res, ref, pvalueCutoff = 1) {
#   ranking <- function(res) {
#     df <- res$log2FoldChange
#     names(df) <- res$Gene
#     df <- sort(df, decreasing = TRUE)
#     return(df)
#   }
#
#   ranked.res <- ranking(res)
#
#   x <- clusterProfiler::GSEA(geneList = ranked.res,
#                              TERM2GENE = ref,
#                              pvalueCutoff = pvalueCutoff,
#                              pAdjustMethod = "BH",
#                              verbose = TRUE,
#                              seed = TRUE)
#
#   result <- x@result %>% arrange(desc(NES))
#   result <- result[, c('NES', 'pvalue', 'p.adjust', 'core_enrichment', 'ID')]
#   return(result)
# }
#
# gsea.out = perform_GSEA(res = res, ref = hallmark)
#
# gsea.out$ID[grep("INF", gsea.out$ID)]
# df =gsea.out["HALLMARK_INFLAMMATORY_RESPONSE",]
#
# df$sample ="RNA-seq"
# df %>% ggplot(aes(sample,ID, color=NES)) + geom_point(size=10) +
#   theme_classic()
# hallmark reference
hallmark <- msigdbr::msigdbr(species = "Homo sapiens", category = "H") %>% dplyr::select(gs_name, gene_symbol)
# Define a function for GSEA analysis
perform_GSEA_out <- function(res, ref, pvalueCutoff = 1) {
ranking <- function(res) {
df <- -(res$log2FoldChange) # This is Navin's version 24.01.04
#df <- res$log2FoldChange
names(df) <- res$Gene
df <- sort(df, decreasing = TRUE)
return(df)
}
ranked.res <- ranking(res)
result <- clusterProfiler::GSEA(geneList = ranked.res,
TERM2GENE = ref,
pvalueCutoff = pvalueCutoff,
pAdjustMethod = "BH",
verbose = TRUE,
seed = TRUE)
return(result)
}
# Perform GSEA
# return GSEA result
gsea.out = perform_GSEA_out(res = res, ref = hallmark)
gsea.out %>% saveRDS(paste0(dir,"data/GSEA/mhc_deseq_gsea.out.rds"))
# Select Hallmark pathway
pathway = 'HALLMARK_INFLAMMATORY_RESPONSE'
#core_enrichment_genes %>% paste0(collapse = ',')
# Draw gseaplot
enrichplot::gseaplot2(gsea.out, geneSetID = pathway,
title = pathway)
## gsea output : core_enrichment
core_enrichment_genes = gsea.out@result %>%
filter(Description == pathway) %>% pull() %>% strsplit("/") %>% unlist()
# 9 grouped MHC I high and 3 grouped MHC I low FFPE samples in Navin's description
# Read the given data
dir= '~/Desktop/DF/DFCI_Barbie/DFCI_Barbie_NK_Marco/'
tpm = read.csv(paste0(dir,"info/published_RNA_seq/mhc_tpm_individual tumors.csv"), check.names = F)
hi <- c(993573, 993575, 993576, 993577, 993578, 993585, 993586, 993589, 993600)
lo <- c(993572,993579,993584)
cols=grep(c(hi,lo) %>% paste0(collapse = "|"), colnames(tpm))
tpm.hi.lo= tpm[,cols]
genes = c("CXCL11","CXCL10","CXCL9","CCL5","CCL2")
rownames(tpm.hi.lo)= tpm[,1]
df=tpm.hi.lo[genes,c(1:5,7:10,6,11:12)]
df$gene = rownames(df)
df.melt = df %>% reshape::melt()
# df.melt [1:3,]
# Create the custom color palette
my_palette <- c(colorRampPalette(colors = c("white", "pink"))(80),
colorRampPalette(colors = c("pink", "red"))(180))
# Use the custom palette in ggplot2
df.melt %>% ggplot(aes(variable, gene, fill = value)) +
geom_point(shape = 21, size=6, color = "#D5DBDB") +
scale_fill_gradientn(colors = my_palette) +
theme_classic() + Seurat::RotatedAxis()
df2= data.frame(lo=rowMeans(df[,10:12]),
hi=rowMeans(df[,1:9]),
gene=df$gene)
df2.melt = df2 %>% reshape::melt()
# Create the custom color palette
# my_palette <- c(colorRampPalette(colors = c("white", "pink"))(80),
#                 colorRampPalette(colors = c("pink", "red"))(180))
# my_palette <- c(colorRampPalette(colors = c("blue", "red"))(100))
my_palette <- c(colorRampPalette(colors = c("#C8C7C7", "#FDABAB"))(80),
colorRampPalette(colors = c("#FDABAB", "#BB0202"))(180))
# Use the custom palette in ggplot2
df2.melt %>% ggplot(aes(variable, gene, fill = value)) +
geom_point(shape = 21, size=6, color = "#C8C7C7") +
scale_fill_gradientn(colors = my_palette) +
theme_classic() + Seurat::RotatedAxis()
mhc_deseq
mhc_deseq[1:3,]
knitr::opts_chunk$set(echo=T, fig.align = "center", eval = F,
message=F, warning=F,
results = "markup",
error = TRUE,
highlight = TRUE,
prompt = FALSE,
tidy = FALSE)
library(cowplot)
library(dplyr)
library(ggplot2)
library(DESeq2)
dir= '~/Desktop/DF/DFCI_Barbie/DFCI_Barbie_NK_Marco/'
res = read.csv(paste0(dir,"info/published_RNA_seq/DEG_Deseq2_removedSamples_Low_vs_High.csv"), check.names = F)
# Prepare data
res$color = 'not_selected'
gene_vector <- c("HLA-A", "HLA-B", "B2M", "TAP1", "AXL","CXCL11", "CXCL10", "CXCL9", "CCL5", "CCL2")
gene_vector= gene_vector[gene_vector %in% res$Gene]
res[res$Gene %in% gene_vector,]$color = "selected"
res$label = ''
res[res$Gene %in% gene_vector,]$label = res[res$Gene %in% gene_vector,]$Gene
# Define gene categories with specific biological functions
black <- c("HLA-A", "HLA-B", "B2M", "TAP1", "CXCL9", "CXCL10", "CXCL11", "CCL2", "CCL5")
black <- black[black %in% res$Gene]
red <- c("IL2", "IL12A", "IL15", "IL18", "IL21", "IL23A", "IFNA", "IFNB")
red <- red[red %in% res$Gene]
blue <- c("TGFB1", "IL10", "IL6")
blue <- blue[blue %in% res$Gene]
# Initialize a label column in the dataset
res$label <- ''
# Update label column to contain gene names for specified categories
res[res$Gene %in% union(black, union(red, blue)),]$label <- res[res$Gene %in% union(black, union(red, blue)),]$Gene
# Assign colors to genes based on their categories
res <- res %>% mutate(label_color = ifelse(Gene %in% black, "black",
ifelse(Gene %in% red, "red",
ifelse(Gene %in% blue, "blue", "other"))))
# Convert label_color to a factor with specific level order
res$label_color <- factor(res$label_color, levels = c("black", "red", "blue", "other"))
# Plotting
res %>%
ggplot(aes(-log2FoldChange, -log10(padj), color = label_color, alpha = label_color)) +
geom_point(data = . %>% filter(!label_color %in% c("black", "red", "blue")), size = 1, alpha = 0.3, show.legend = FALSE) +
# Plot highlighted genes
geom_point(data = . %>% filter(label_color %in% c("black", "red", "blue")), size = 1, show.legend = FALSE) +
scale_color_manual(values = c("grey", "black", "red", "blue")) +
# Set the alpha values for points
scale_alpha_manual(values = c(1, 1, 1, 0.3)) +
# Add labels to highlighted genes using ggrepel to avoid overlap
ggrepel::geom_text_repel(data = . %>% filter(label_color %in% c("black", "red", "blue")),
aes(label = label, color = label_color),
size = 4, max.overlaps = Inf, show.legend = FALSE) +
theme_classic() +
xlab(expression(Log[2]*" (Fold Change)")) +
ylab(expression(-Log[10]*" (padj)")) +
theme(axis.text = element_text(size = 14)) +
# Define limits and breaks for the x-axis
xlim(c(-11, 11)) +
scale_x_continuous(breaks = seq(-10, 10, by = 2), limits = c(-10, 11)) +
# Add vertical and horizontal dashed lines at significant thresholds
geom_vline(xintercept = c(-log2(1.5), log2(1.5)), color="grey", linetype = "dashed") +
geom_hline(yintercept = -log10(0.05), color="grey", linetype = "dashed")
res %>%
ggplot(aes(-log2FoldChange, -log10(padj), color = label_color, alpha = label_color)) +
geom_point(data = . %>% filter(!label_color %in% c("black", "red", "blue")), size = 1, alpha = 0.3, show.legend = F) +
geom_point(data = . %>% filter(label_color %in% c("black", "red", "blue")), size = 1, show.legend = F) +
scale_color_manual(values = c("grey","black","red","blue")) +
scale_alpha_manual(values = c(1, 1, 1, 0.3)) +
ggrepel::geom_text_repel(data = . %>% filter(label_color %in% c("black", "red", "blue")),
aes(label = label, color = label_color),
size = 4, max.overlaps = Inf, show.legend = FALSE) +
theme_classic() +
xlab(expression(Log[2]*" (Fold Change)")) +
ylab(expression(-Log[10]*" (padj)")) +
theme(axis.text = element_text(size = 14))
# Plotting
res %>%
ggplot(aes(-log2FoldChange, -log10(padj),
color = label_color, alpha = label_color)) +
geom_point(data = . %>% filter(!label_color %in% c("black", "red", "blue")),
size = 1, alpha = 0.3, show.legend = FALSE) +
# Plot highlighted genes
geom_point(data = . %>% filter(label_color %in% c("black", "red", "blue")),
size = 1, show.legend = FALSE) +
scale_color_manual(values = c("grey", "black", "red", "blue")) +
# Set the alpha values for points
scale_alpha_manual(values = c(1, 1, 1, 0.3)) +
# Add labels to highlighted genes using ggrepel to avoid overlap
ggrepel::geom_text_repel(data = . %>% filter(label_color %in% c("black", "red", "blue")),
aes(label = label, color = label_color),
size = 4, max.overlaps = Inf, show.legend = FALSE) +
theme_classic() +
xlab(expression(Log[2]*" (Fold Change)")) +
ylab(expression(-Log[10]*" (padj)")) +
theme(axis.text = element_text(size = 14)) +
# Define limits and breaks for the x-axis
xlim(c(-11, 11)) +
scale_x_continuous(breaks = seq(-10, 10, by = 2), limits = c(-10, 11)) +
# Add vertical and horizontal dashed lines at significant thresholds
geom_vline(xintercept = c(-log2(1.5), log2(1.5)), color="grey", linetype = "dashed") +
geom_hline(yintercept = -log10(0.05), color="grey", linetype = "dashed")
dir= '~/Desktop/DF/DFCI_Barbie/DFCI_Barbie_NK_Marco/'
df.all = read.csv(paste0(dir,"data/additional_request/Fig4A.GSEA.csv"),
row.names = 1, stringsAsFactors = T)
# df.all = df.all %>% filter(sample != "H69M")
# Reorder x-axis and y-axis labels
df.all$sample = factor(df.all$sample, levels = c("CORL47","H82","H69M","H69EZ_G1","H69EZ_GV",
"H196"))
df.all$ID = factor(df.all$ID, levels= c("INTERFERON_GAMMA_RESPONSE",
"INFLAMMATORY_RESPONSE",
"CHEMOKINE_PRODUCTION",
"ALLOGRAFT_REJECTION",
"TGF_BETA_SIGNALING",
"NEUROENDOCRINE"))
# Draw plot
df.all %>% ggplot(aes(x = sample, y = forcats::fct_rev(ID), fill = NES, size = p.adjust)) +
geom_point(shape=21, color="darkgrey") +
theme_classic() +
scale_size_continuous(range = c(6,2), name = "FDR") +  # 상단 범례 제목 설정
scale_fill_gradient2(low = "darkblue", mid = "white", high = "red", name = "NES") +
xlab("") +
ylab("") +
ggtitle("Cell Line / H69") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggeasy::easy_center_title()
# Read CPDM PDX RNAseq TPM value
dir = "~/Desktop/DF/DFCI_Paweletz/2023_RNA_seq_PDX/"
count.mtx = read.csv(paste0(dir, "count_matrix/CPDM_PDX_RNAseq_count.mtx.24.04.07.csv"), row.names = 1)
tpm = read.csv(paste0(dir, "count_matrix/CPDM_PDX_RNAseq_tpm.24.04.07.csv"), row.names = 1)
# Function
# Spearman correlation to input gene
gene_cor_spearman = function(gene, tpm_data=tpm){
input_exp <- t(tpm_data[gene, , drop = FALSE])  # 전치하여 샘플이 열이 되게 함
# 다른 유전자 데이터 확인
other_genes <- t(tpm_data)  # 전치하여 샘플이 열이 되게 함
# 스피어만 상관 계수 및 p-value 계산
results <- WGCNA::corAndPvalue(input_exp, other_genes, use = "pairwise.complete.obs", method = "spearman")
df = results$cor %>% t() %>% data.frame()
df2 = results$p %>% t() %>% data.frame()
df = cbind(df,df2)
colnames(df)[2] = "pvalue"
return(df)
}
# Read CPDM PDX RNAseq TPM value
dir = "~/Desktop/DF/DFCI_Paweletz/2023_RNA_seq_PDX/"
count.mtx = read.csv(paste0(dir,"count_matrix/CPDM_PDX_RNAseq_count.mtx.24.04.07.csv"), row.names = 1)
tpm = read.csv(paste0(dir, "count_matrix/CPDM_PDX_RNAseq_tpm.24.04.07.csv"), row.names = 1)
# Function
# Spearman correlation to input gene
gene_cor_spearman = function(gene, tpm_data=tpm){
input_exp <- t(tpm_data[gene, , drop = FALSE])  # 전치하여 샘플이 열이 되게 함
# 다른 유전자 데이터 확인
other_genes <- t(tpm_data)  # 전치하여 샘플이 열이 되게 함
# 스피어만 상관 계수 및 p-value 계산
results <- WGCNA::corAndPvalue(input_exp, other_genes, use = "pairwise.complete.obs", method = "spearman")
df = results$cor %>% t() %>% data.frame()
df2 = results$p %>% t() %>% data.frame()
df = cbind(df,df2)
colnames(df)[2] = "pvalue"
return(df)
}
# Read CPDM PDX RNAseq TPM value
dir = "~/Desktop/DF/DFCI_Paweletz/2023_RNA_seq_PDX/"
count.mtx = read.csv(paste0(dir,"count_matrix/CPDM_PDX_RNAseq_DNAnexus/CPDM_PDX_RNAseq_count.mtx.24.04.07.csv"), row.names = 1)
tpm = read.csv(paste0(dir, "count_matrix/CPDM_PDX_RNAseq_DNAnexus/CPDM_PDX_RNAseq_tpm.24.04.07.csv"), row.names = 1)
# Function
# Spearman correlation to input gene
gene_cor_spearman = function(gene, tpm_data=tpm){
input_exp <- t(tpm_data[gene, , drop = FALSE])  # 전치하여 샘플이 열이 되게 함
# 다른 유전자 데이터 확인
other_genes <- t(tpm_data)  # 전치하여 샘플이 열이 되게 함
# 스피어만 상관 계수 및 p-value 계산
results <- WGCNA::corAndPvalue(input_exp, other_genes, use = "pairwise.complete.obs", method = "spearman")
df = results$cor %>% t() %>% data.frame()
df2 = results$p %>% t() %>% data.frame()
df = cbind(df,df2)
colnames(df)[2] = "pvalue"
return(df)
}
# Apply function
tacstd2 = gene_cor_spearman(gene = "TACSTD2")
# Save data
# tacstd2 %>% write.csv(paste0(dir,"data/CPDM_cor_spearman/CPDM_RNASeq_cor_TACSTD2_spearman_allGenes.csv"))
tacstd2
dir <- "~/Desktop/figure/"
# Input data
adc = "ADC_gene_set.plus.CPDM.tpm.csv"
# tcsa = "TCSA_gene_set.KRAS.CPDM.tpm.csv"
tpm.adc = read.csv(paste0("~/Desktop/figure/",adc), row.names = 1)
# tpm.tcsa = read.csv(paste0("~/Desktop/figure/",tcsa), row.names = 1)
# Function 1
correlation_df = function(input_exp){
input_exp = t(input_exp)
# 스피어만 상관 계수 및 p-value 계산
results <- WGCNA::cor(input_exp, use = "pairwise.complete.obs", method = "spearman")
df = results %>% data.frame() # spearman correlation
return(df)
}
# Application
input.adc = correlation_df(input_exp = tpm.adc)
#input.tcsa = correlation_df(input_exp = tpm.tcsa)
# Function 2
correlation_heatmap = function(input.data, low=60, high=80){
# Heatmap
my.color=c(colorRampPalette(colors = c("#2874A6","white"))(low),
colorRampPalette(colors = c("white","#D35400"))(high))
input.data %>% pheatmap::pheatmap(show_rownames = F, show_colnames = F,
border_color = NA,
color = my.color,
main = "Correlation Heatmap")
}
# Function 2 version 2
correlation_heatmap = function(input.data, low=60, high=80,
showname= F, fontsize=5){
# Heatmap
my.color=c(colorRampPalette(colors = c("#2874A6","white"))(low),
colorRampPalette(colors = c("white","#D35400"))(high))
input.data %>% pheatmap::pheatmap(show_rownames = showname,
show_colnames = showname,
fontsize = fontsize,
border_color = NA,
color = my.color,
main = "Correlation Heatmap")
}
# Function 3
# Create heatmap data frame with corresponding row/column order in heatmap
correlation_heatmap_dataframe = function(input.data, low=60, high=80){
# Heatmap
my.color=c(colorRampPalette(colors = c("#2874A6","white"))(low),
colorRampPalette(colors = c("white","#D35400"))(high))
df = input.data %>% pheatmap::pheatmap(show_rownames = F, show_colnames = F,
border_color = NA,
color = my.color,
main = "Correlation Heatmap")
input.reordered = input.data[df$tree_row$order, df$tree_col$order]
return(input.reordered)
}
correlation_heatmap(input.data = input.data)
# Read CPDM PDX RNAseq TPM value
dir = "~/Desktop/DF/DFCI_Paweletz/2023_RNA_seq_PDX/"
count.mtx = read.csv(paste0(dir,"count_matrix/CPDM_PDX_RNAseq_DNAnexus/CPDM_PDX_RNAseq_count.mtx.24.04.07.csv"), row.names = 1)
tpm = read.csv(paste0(dir, "count_matrix/CPDM_PDX_RNAseq_DNAnexus/CPDM_PDX_RNAseq_tpm.24.04.07.csv"), row.names = 1)
# Function
# Spearman correlation to input gene
gene_cor_spearman = function(gene, tpm_data=tpm){
input_exp <- t(tpm_data[gene, , drop = FALSE])  # 전치하여 샘플이 열이 되게 함
# 다른 유전자 데이터 확인
other_genes <- t(tpm_data)  # 전치하여 샘플이 열이 되게 함
# 스피어만 상관 계수 및 p-value 계산
results <- WGCNA::corAndPvalue(input_exp, other_genes, use = "pairwise.complete.obs", method = "spearman")
df = results$cor %>% t() %>% data.frame()
df2 = results$p %>% t() %>% data.frame()
df = cbind(df,df2)
colnames(df)[2] = "pvalue"
return(df)
}
# Apply function
tacstd2 = gene_cor_spearman(gene = "TACSTD2")
# Save data
# tacstd2 %>% write.csv(paste0(dir,"data/CPDM_cor_spearman/CPDM_RNASeq_cor_TACSTD2_spearman_allGenes.csv"))
dir <- "~/Desktop/figure/"
# Input data
adc = "ADC_gene_set.plus.CPDM.tpm.csv"
# tcsa = "TCSA_gene_set.KRAS.CPDM.tpm.csv"
tpm.adc = read.csv(paste0("~/Desktop/figure/",adc), row.names = 1)
# Function 1
correlation_df = function(input_exp){
input_exp = t(input_exp)
# 스피어만 상관 계수 및 p-value 계산
results <- WGCNA::cor(input_exp, use = "pairwise.complete.obs", method = "spearman")
df = results %>% data.frame() # spearman correlation
return(df)
}
# Application
input.adc = correlation_df(input_exp = tpm.adc)
correlation_heatmap = function(input.data, low=60, high=80){
# Heatmap
my.color=c(colorRampPalette(colors = c("#2874A6","white"))(low),
colorRampPalette(colors = c("white","#D35400"))(high))
input.data %>% pheatmap::pheatmap(show_rownames = F, show_colnames = F,
border_color = NA,
color = my.color,
main = "Correlation Heatmap")
}
input.data = input.adc
correlation_heatmap(input.data = input.data)
input.data = input.adc
correlation_heatmap(input.data = input.data)
adc.hm.df[1:10,]
input.data = input.adc
correlation_heatmap(input.data = input.data)
adc.hm.df = correlation_heatmap_dataframe(input.data = input.data)
adc.hm.df = correlation_heatmap_dataframe(input.data = input.data)
adc.hm.df[1:10,]
adc.hm.df = correlation_heatmap_dataframe(input.data = input.data)
adc.hm.df[1:10,1:10] %>% DT::datatable(rownames = F)
adc.hm.df[1:10,1:10]
input.data = input.adc
# correlation_heatmap(input.data = input.data)
adc.hm.df = correlation_heatmap_dataframe(input.data = input.data)
adc.hm.df[1:10,1:10] %>% DT::datatable(rownames = F)
input.data = input.adc
# correlation_heatmap(input.data = input.data)
adc.hm.df = correlation_heatmap_dataframe(input.data = input.data)
round(adc.hm.df[1:10,1:10],2) %>% DT::datatable()
